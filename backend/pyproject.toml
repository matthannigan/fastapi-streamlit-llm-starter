[tool.poetry]
name = "fastapi-streamlit-llm-starter-backend"
version = "0.1.0"
description = "Backend FastAPI application for LLM-powered APIs with infrastructure services"
authors = ["FastAPI Streamlit LLM Starter Contributors"]
maintainers = ["FastAPI Streamlit LLM Starter Contributors"]
license = "MIT"
readme = "README.md"
packages = [{include = "app"}]
keywords = [
    "fastapi",
    "api",
    "backend",
    "llm",
    "ai",
    "production",
    "microservices",
    "infrastructure"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Framework :: FastAPI",
]

[tool.poetry.dependencies]
python = "^3.12"
my_project_shared_lib = {path = "../shared", develop = true}
fastapi = "^0.116.0"
uvicorn = {extras = ["standard"], version = "^0.35.0"}
pydantic = "^2.10"
pydantic-settings = "^2.0.0"
pydantic-ai = "^0.2.8,<0.3.0"
python-multipart = "^0.0.20,<0.1.0"
python-dotenv = "^1.0.0,<2.0.0"
httpx = "^0.28.1"
requests = "^2.31.0"
redis = "^6.0.0,<7.0.0"
tenacity = "^9.1.2,<10.0.0"
circuitbreaker = "^2.1.3,<3.0.0"
jsonschema = "^4.0.0,<5.0.0"
psutil = "^7.0.0,<8.0.0"
brotli = "^1.1.0,<2.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^1.0.0"
pytest-cov = "^4.0"
pytest-xdist = "^3.7.0"
pytest-mock = "^3.10.0"
ruff = "^0.13.0"
mypy = "^1.18.0"
pre-commit = "^3.0"
types-redis = "^4.0.0"
types-requests = "^2.31.0"
httpx = "^0.28.1"

[tool.poetry.group.test.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^1.0.0"
pytest-cov = "^4.0"
pytest-xdist = "^3.7.0"
pytest-mock = "^3.10.0"
httpx = "^0.28.1"
fakeredis = "^2.10.0"
testcontainers = "^4.0.0"
pytest-timeout = "^2.4.0"
pytest-randomly = "^4.0.1"

[tool.poetry.group.prod.dependencies]
prometheus-client = "^0.16.0"
structlog = "^23.0.0"
gunicorn = "^21.0.0"

# Use Poetry run for development scripts
# poetry run uvicorn app.main:app --reload --host 0.0.0.0 --port 8000 (dev)
# poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 (prod)
# poetry run pytest (test)
# poetry run ruff check . (lint)
# poetry run ruff format . (format)
# poetry run mypy app/ (type-check)

[tool.poetry.urls]
Homepage = "https://github.com/your-org/fastapi-streamlit-llm-starter"
Repository = "https://github.com/your-org/fastapi-streamlit-llm-starter"
Documentation = "https://github.com/your-org/fastapi-streamlit-llm-starter/tree/main/docs"
Issues = "https://github.com/your-org/fastapi-streamlit-llm-starter/issues"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Tool configurations specific to backend development

[tool.pytest.ini_options]
# Backend-specific test configuration
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-v"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API endpoint tests",
    "infrastructure: marks tests as infrastructure service tests",
    "cache: marks tests related to caching functionality",
    "auth: marks tests related to authentication",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.ruff]
# Backend-specific linting configuration
target-version = "py312"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit (security)
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL",  # Pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "PERF", # Perflint
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",    # line too long, handled by formatter
    "B008",    # do not perform function calls in argument defaults
    "C901",    # too complex
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "S104",    # hardcoded bind all interfaces (acceptable for development)
    "S108",    # probable insecure usage of temp file/directory
    "COM812",  # missing trailing comma (handled by formatter)
    "ISC001",  # implicitly concatenated string literals (handled by formatter)
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = [
    "S101",    # asserts allowed in tests
    "ARG",     # unused function args in tests are often expected
    "FBT",     # don't care about boolean flag args in tests
    "PLR2004", # magic values are OK in tests
    "S106",    # hardcoded password in tests
    "SLF001",  # private member access in tests
]
"app/main.py" = [
    "B008",    # function calls in defaults acceptable for FastAPI dependencies
]
"examples/**/*.py" = [
    "T20",     # print statements acceptable in examples
    "S101",    # asserts acceptable in examples
]

[tool.ruff.isort]
known-first-party = ["app", "shared"]
split-on-trailing-comma = true
force-single-line = false

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.mccabe]
max-complexity = 10

[tool.mypy]
# Backend-specific type checking configuration
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# FastAPI and backend-specific overrides
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "pytest.*",
    "pydantic_ai.*",
    "testcontainers.*",
    "fakeredis.*",
    "circuitbreaker.*",
    "tenacity.*",
    "uvicorn.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["app"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/__pycache__/*",
    "*/build/*",
    "*/dist/*",
    "examples/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"