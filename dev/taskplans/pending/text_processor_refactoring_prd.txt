<context>
# Overview  
The TextProcessorService currently spans 478 lines and violates the Single Responsibility Principle by handling multiple concerns: AI agent management, operation routing, resilience integration, caching, input sanitization, response validation, fallback handling, batch processing, and metrics. This PRD outlines a Hybrid Approach refactoring strategy that combines utility extraction (low-risk) with gradual migration to operation handlers (high-value) to improve maintainability, testability, and code organization while preserving production stability.

The refactoring addresses the core problem of a monolithic service class that is difficult to maintain, test, and extend. It's designed for the development team working on the FastAPI-Streamlit LLM starter project, providing value through improved code quality, reduced technical debt, and easier feature development.

# Core Features  
## Phase 1: Utility Extraction (Approach 5)
- **ProcessingContext Class**: Encapsulates request processing state and metadata, reducing parameter passing and improving traceability
- **CacheManager**: Extracts all caching logic including cache checks, storage, and cache response type handling
- **FallbackProvider**: Centralizes fallback response generation and fallback sentiment creation
- **BatchProcessor**: Isolates batch processing logic including concurrency management and result aggregation
- **ResilienceManager**: Consolidates resilience strategy configuration and health/metrics reporting

## Phase 2: Operation Handler Pattern (Approach 1)
- **BaseTextOperation**: Abstract base class providing template method pattern for common operation flow
- **Individual Operation Handlers**: Separate classes for each operation (SummarizeOperation, SentimentOperation, etc.)
- **Operation Factory**: Registry pattern for operation handler instantiation and management
- **Gradual Migration**: New operations use handler pattern while existing operations remain in main service

# User Experience  
## Developer Personas
- **Feature Developers**: Need to add new text processing operations easily
- **Maintenance Engineers**: Need to debug and fix issues in specific operations  
- **Test Engineers**: Need to unit test individual operations in isolation

## Key Developer Flows
- **Adding New Operations**: Create operation handler → Register in factory → Write tests
- **Debugging Issues**: Navigate directly to specific operation handler class
- **Testing Operations**: Test individual handlers without full service setup
- **Monitoring Performance**: Access operation-specific metrics and health data

## Code Organization Considerations
- Maintain backward compatibility during transition
- Preserve existing test coverage
- Keep the global `text_processor` singleton pattern
- Minimize breaking changes to API consumers
</context>

<PRD>
# Technical Architecture  
## System Components
### Phase 1 Components
```python
# New utility classes
class ProcessingContext:
    - request: TextProcessingRequest
    - processing_id: str  
    - start_time: float
    - metadata: Dict[str, Any]
    - sanitized_inputs: Dict[str, Any]

class CacheManager:
    - async get_cached_response()
    - async cache_response() 
    - _handle_cache_type_conversion()

class FallbackProvider:
    - async get_fallback_response()
    - async get_fallback_sentiment()
    - _fallback_responses: Dict[ProcessingOperation, Any]

class BatchProcessor:
    - async process_batch()
    - _process_single_request_in_batch()
    - _calculate_batch_statistics()

class ResilienceManager:
    - configure_resilience_strategies()
    - get_resilience_health()
    - get_resilience_metrics()
```

### Phase 2 Components  
```python
# Operation handler pattern
class BaseTextOperation(ABC):
    - resilience_strategy: ResilienceStrategy
    - async execute(context: ProcessingContext) -> Any
    - async _process_with_resilience() -> Any
    - async _validate_response() -> Any

class SummarizeOperation(BaseTextOperation):
    - async _summarize_text() -> str
    - _build_prompt() -> str

class OperationFactory:
    - _handlers: Dict[ProcessingOperation, BaseTextOperation]
    - get_handler(operation: ProcessingOperation) -> BaseTextOperation
    - register_handler() -> None
```

## Data Models
- Preserve existing Pydantic models (TextProcessingRequest, TextProcessingResponse, etc.)
- Add ProcessingContext for internal state management
- Maintain compatibility with shared.models

## APIs and Integrations
- Maintain existing public API: `text_processor.process_text()` and `text_processor.process_batch()`
- Internal API changes are encapsulated within the service
- Preserve resilience integration with `ai_resilience` decorators
- Maintain cache integration with `ai_cache` service

## Infrastructure Requirements
- No additional infrastructure needed
- Existing dependencies remain the same
- Memory usage may slightly increase due to additional class instances
- Performance impact should be minimal due to delegation pattern

# Development Roadmap  
## Phase 1: Utility Extraction (MVP)
### 1.1 Extract ProcessingContext
- Create ProcessingContext class to encapsulate request state
- Refactor process_text() to use context object
- Update logging to use processing_id from context
- Test: Verify all existing functionality works with context

### 1.2 Extract CacheManager  
- Move all caching logic to dedicated CacheManager class
- Handle cache type conversion edge cases
- Integrate with ProcessingContext
- Test: Verify cache hit/miss scenarios work correctly

### 1.3 Extract FallbackProvider
- Move fallback response generation to FallbackProvider
- Centralize fallback response definitions
- Handle operation-specific fallback logic
- Test: Verify fallback responses in degraded service scenarios

### 1.4 Extract BatchProcessor
- Move batch processing logic to BatchProcessor class
- Maintain semaphore-based concurrency control
- Preserve error handling and statistics calculation
- Test: Verify batch processing performance and error handling

### 1.5 Extract ResilienceManager
- Move resilience strategy configuration
- Centralize health and metrics reporting
- Maintain integration with ai_resilience decorators
- Test: Verify resilience patterns still function correctly

## Phase 2: Operation Handler Pattern (Future Enhancements)
### 2.1 Create BaseTextOperation Framework
- Design abstract base class with template method pattern
- Define common operation lifecycle (sanitize → process → validate → cache)
- Implement resilience integration in base class
- Test: Create mock operation handler to verify framework

### 2.2 Create Operation Factory
- Implement registry pattern for operation handlers
- Support dynamic handler registration
- Maintain backward compatibility with existing operations
- Test: Verify factory can instantiate and manage handlers

### 2.3 Migrate Individual Operations (Gradual)
- Start with new operations using handler pattern
- Gradually migrate existing operations (SummarizeOperation first)
- Maintain dual support during transition period
- Test: Verify migrated operations produce identical results

### 2.4 Complete Migration
- Migrate remaining operations to handler pattern
- Remove legacy operation methods from main service
- Update documentation and examples
- Test: Full regression testing of all operations

# Logical Dependency Chain
## Foundation First (Phase 1)
1. **ProcessingContext** - Must be created first as other utilities depend on it
2. **CacheManager** - Independent utility, can be developed in parallel
3. **FallbackProvider** - Independent utility, can be developed in parallel  
4. **BatchProcessor** - Depends on ProcessingContext, develop after 1
5. **ResilienceManager** - Independent utility, can be developed in parallel

## Quick Wins for Visibility
- Start with ProcessingContext and CacheManager for immediate line count reduction
- FallbackProvider provides clear separation of concerns that's easy to demonstrate
- Each utility extraction provides measurable improvement in code organization

## Atomic but Buildable Features
- Each utility extraction is atomic - can be developed, tested, and deployed independently
- ProcessingContext provides foundation for Phase 2 operation handlers
- Utilities can be enhanced incrementally (e.g., adding caching strategies to CacheManager)

## Phase 2 Dependencies
1. **BaseTextOperation** - Foundation for all handlers, must be solid before handler migration
2. **OperationFactory** - Needed before migrating operations to provide handler management
3. **Individual Handlers** - Can be migrated one at a time, starting with simplest (Summarize)
4. **Full Migration** - Only after all handlers are proven stable

# Risks and Mitigations  
## Technical Challenges
**Risk**: Breaking existing functionality during refactoring
- **Mitigation**: Extensive test coverage for each utility extraction, maintain existing public API

**Risk**: Performance degradation due to additional abstraction layers  
- **Mitigation**: Benchmark before/after, use delegation pattern to minimize overhead

**Risk**: Increased complexity making debugging harder
- **Mitigation**: Maintain clear separation of concerns, comprehensive logging, good documentation

## MVP Definition and Buildability
**Risk**: Over-engineering the solution for current needs
- **Mitigation**: Phase 1 focuses only on extraction, Phase 2 only for new operations initially

**Risk**: Team unfamiliarity with new patterns
- **Mitigation**: Gradual migration, pair programming sessions, comprehensive documentation

**Risk**: Regression in production due to missed edge cases
- **Mitigation**: Maintain backward compatibility, extensive integration testing, gradual rollout

## Resource Constraints  
**Risk**: Development time impact on feature delivery
- **Mitigation**: Phase 1 can be done incrementally during normal development cycles

**Risk**: Testing effort for refactored code
- **Mitigation**: Preserve existing test structure, add focused unit tests for new utilities

**Risk**: Code review overhead for large changes
- **Mitigation**: Break into small, focused PRs for each utility extraction

# Appendix  
## Research Findings
- Current TextProcessorService has 9 distinct responsibilities
- 15+ files import and use the service throughout the codebase
- Extensive test coverage exists (85%+ coverage) that must be preserved
- Global singleton pattern is heavily used and should be maintained

## Technical Specifications
### File Structure Changes
```
backend/app/services/
├── text_processor.py (reduced from 478 to ~200 lines)
├── text_processing/
│   ├── __init__.py
│   ├── context.py (ProcessingContext)
│   ├── cache_manager.py (CacheManager) 
│   ├── fallback_provider.py (FallbackProvider)
│   ├── batch_processor.py (BatchProcessor)
│   ├── resilience_manager.py (ResilienceManager)
│   └── operations/ (Phase 2)
│       ├── __init__.py
│       ├── base.py (BaseTextOperation)
│       ├── factory.py (OperationFactory)
│       ├── summarize.py (SummarizeOperation)
│       └── sentiment.py (SentimentOperation)
```

### Compatibility Requirements
- Maintain existing public API signatures
- Preserve global `text_processor` instance  
- Keep all existing dependencies and imports working
- Ensure test suite passes without modification during Phase 1

### Success Metrics
- Reduce main service file from 478 to <300 lines (Phase 1)
- Achieve >90% test coverage for new utility classes
- No performance regression >5% in processing time
- Zero breaking changes to existing API consumers
- Enable adding new operations in <50 lines of code (Phase 2)
</PRD> 