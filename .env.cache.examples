# Cache Configuration Examples - Common Scenarios
# Copy the relevant section to your .env file and customize as needed

# ============================================================================
# üìù SIMPLE WEB APPLICATION SETUP
# ============================================================================
# Basic web application with standard caching needs
# Suitable for: REST APIs, traditional web apps, content caching

# Minimal setup (3 variables):
CACHE_PRESET=simple
CACHE_REDIS_URL=redis://localhost:6379
ENABLE_AI_CACHE=false

# Alternative for shared Redis:
# REDIS_URL=redis://localhost:6379          # For resilience, sessions, etc.
# CACHE_REDIS_URL=redis://localhost:6379    # Same Redis for cache
# ENABLE_AI_CACHE=false

# ============================================================================
# ü§ñ AI-POWERED APPLICATION SETUP  
# ============================================================================
# LLM-powered application with text processing and AI features
# Suitable for: Chatbots, text analysis, AI content generation

# Development environment:
CACHE_PRESET=ai-development
CACHE_REDIS_URL=redis://localhost:6379
ENABLE_AI_CACHE=true

# Production environment:
# CACHE_PRESET=ai-production
# CACHE_REDIS_URL=redis://ai-cache-redis:6379
# ENABLE_AI_CACHE=true

# With custom AI tuning:
# CACHE_PRESET=ai-production
# CACHE_REDIS_URL=redis://ai-cache-redis:6379
# ENABLE_AI_CACHE=true
# CACHE_CUSTOM_CONFIG='{"text_hash_threshold": 500, "operation_ttls": {"summarize": 14400, "sentiment": 7200}}'

# ============================================================================
# ‚ö° HIGH-PERFORMANCE PRODUCTION SETUP
# ============================================================================
# High-traffic production with dedicated Redis and performance optimization
# Suitable for: High-scale APIs, e-commerce, real-time applications

# Basic high-performance:
CACHE_PRESET=production
CACHE_REDIS_URL=redis://cache-redis:6379
ENABLE_AI_CACHE=false

# With performance tuning:
# CACHE_PRESET=production
# CACHE_REDIS_URL=redis://cache-redis:6379
# ENABLE_AI_CACHE=false
# CACHE_CUSTOM_CONFIG='{"max_connections": 100, "compression_level": 9, "default_ttl": 10800}'

# Multi-Redis setup (separate Redis instances):
# REDIS_URL=redis://general-redis:6379        # For sessions, rate limiting
# CACHE_REDIS_URL=redis://cache-redis:6379    # Dedicated cache Redis
# ENABLE_AI_CACHE=false

# ============================================================================
# üõ°Ô∏è DEVELOPMENT WITH DEBUGGING SETUP
# ============================================================================
# Development environment with detailed logging and fast feedback
# Suitable for: Local development, testing, debugging cache issues

# Standard development:
CACHE_PRESET=development
CACHE_REDIS_URL=redis://localhost:6379
ENABLE_AI_CACHE=true

# Fast development (quick cache expiration):
# CACHE_PRESET=development
# CACHE_REDIS_URL=redis://localhost:6379
# ENABLE_AI_CACHE=true
# CACHE_CUSTOM_CONFIG='{"default_ttl": 300, "connection_timeout": 1}'

# Development with verbose logging:
# CACHE_PRESET=development
# CACHE_REDIS_URL=redis://localhost:6379
# ENABLE_AI_CACHE=true
# CACHE_CUSTOM_CONFIG='{"log_level": "DEBUG", "enable_monitoring": true}'

# ============================================================================
# üîí SECURE PRODUCTION SETUP (TLS + Authentication)
# ============================================================================
# Production setup with Redis authentication and TLS encryption
# Suitable for: Cloud deployments, sensitive data, compliance requirements

# Secure Redis with TLS:
CACHE_PRESET=production
CACHE_REDIS_URL=rediss://secure-cache-redis.example.com:6380
CACHE_REDIS_PASSWORD=your_secure_redis_password
CACHE_USE_TLS=true
ENABLE_AI_CACHE=true

# With custom certificate paths:
# CACHE_PRESET=production
# CACHE_REDIS_URL=rediss://secure-cache-redis.example.com:6380
# CACHE_REDIS_PASSWORD=your_secure_redis_password
# CACHE_USE_TLS=true
# CACHE_TLS_CERT_PATH=/etc/ssl/certs/redis-client.crt
# CACHE_TLS_KEY_PATH=/etc/ssl/private/redis-client.key
# ENABLE_AI_CACHE=true

# ============================================================================
# üéØ MIXED ENVIRONMENT SETUP (AI + High Performance)
# ============================================================================
# Production AI application with performance optimization
# Suitable for: Production LLM services, AI-powered SaaS, ML platforms

# AI production with custom optimization:
CACHE_PRESET=ai-production
CACHE_REDIS_URL=redis://ai-cache-redis:6379
ENABLE_AI_CACHE=true
CACHE_CUSTOM_CONFIG='{"max_connections": 75, "text_hash_threshold": 2000, "compression_level": 8}'

# Dedicated AI Redis cluster:
# CACHE_PRESET=ai-production
# CACHE_REDIS_URL=redis://ai-cache-cluster:6379
# ENABLE_AI_CACHE=true
# CACHE_CUSTOM_CONFIG='{"max_connections": 100, "operation_ttls": {"summarize": 21600, "qa": 14400}}'

# ============================================================================
# üß™ TESTING AND CI/CD SETUP
# ============================================================================
# Testing environments with minimal cache footprint and isolation
# Suitable for: Unit tests, integration tests, CI/CD pipelines

# Minimal testing (disabled cache):
CACHE_PRESET=disabled
CACHE_REDIS_URL=redis://test-redis:6379/15
ENABLE_AI_CACHE=false

# Fast testing with caching:
# CACHE_PRESET=development
# CACHE_REDIS_URL=redis://test-redis:6379/15
# ENABLE_AI_CACHE=false
# CACHE_CUSTOM_CONFIG='{"default_ttl": 60, "memory_cache_size": 10}'

# AI testing environment:
# CACHE_PRESET=ai-development
# CACHE_REDIS_URL=redis://test-redis:6379/15
# ENABLE_AI_CACHE=true
# CACHE_CUSTOM_CONFIG='{"default_ttl": 300, "text_hash_threshold": 100}'

# ============================================================================
# üê≥ DOCKER COMPOSE EXAMPLES
# ============================================================================

# Development (docker-compose.dev.yml):
# backend:
#   environment:
#     - CACHE_PRESET=ai-development
#     - CACHE_REDIS_URL=redis://redis:6379
#     - ENABLE_AI_CACHE=true

# Production (docker-compose.prod.yml):
# backend:
#   environment:
#     - CACHE_PRESET=ai-production
#     - CACHE_REDIS_URL=redis://cache-redis:6379
#     - ENABLE_AI_CACHE=true
#     - CACHE_USE_TLS=true

# ============================================================================
# üîß KUBERNETES DEPLOYMENT EXAMPLES
# ============================================================================

# ConfigMap example:
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: cache-config
# data:
#   CACHE_PRESET: "ai-production"
#   CACHE_REDIS_URL: "redis://redis-service:6379"
#   ENABLE_AI_CACHE: "true"

# Secret for Redis password:
# apiVersion: v1
# kind: Secret  
# metadata:
#   name: cache-secrets
# data:
#   CACHE_REDIS_PASSWORD: <base64-encoded-password>

# ============================================================================
# üí° CHOOSING THE RIGHT SETUP
# ============================================================================

# Use DISABLED when:
# - Running tests without cache dependencies
# - Minimal resource requirements
# - Cache is not needed for functionality

# Use SIMPLE when:
# - Standard web application
# - Balanced performance needs
# - No AI features required

# Use DEVELOPMENT when:
# - Local development environment
# - Fast feedback loops needed
# - Debugging cache behavior

# Use PRODUCTION when:
# - Production web application
# - High performance requirements
# - Long TTLs for efficiency

# Use AI-DEVELOPMENT when:
# - Developing AI/LLM features
# - Need AI-specific optimizations
# - Local AI development

# Use AI-PRODUCTION when:
# - Production AI application
# - LLM-powered services
# - High-performance AI caching

# ============================================================================
# üìä PERFORMANCE COMPARISON
# ============================================================================

# Configuration complexity (approximate):
# Legacy system: 28+ environment variables
# Preset system: 1-4 environment variables (96% reduction)

# Setup time:
# Legacy system: 15-30 minutes to configure properly
# Preset system: 2-5 minutes to get running (90% faster)

# Error rate:
# Legacy system: High (many variables to misconfigure)  
# Preset system: Low (presets are pre-validated)

# Maintainability:
# Legacy system: Complex (many variables to update)
# Preset system: Simple (preset handles most configuration)