# Cache Configuration Examples - Common Scenarios
# Copy the relevant section to your .env file and customize as needed
#
# IMPORTANT SECURITY NOTE:
# All examples below assume secure Redis with TLS (rediss://) in production.
# For production use, ALWAYS use:
# - rediss:// protocol (TLS encryption)
# - Strong authentication passwords
# - Data encryption (REDIS_ENCRYPTION_KEY)
# - Certificate validation
#
# Quick Setup: Run ./scripts/setup-secure-redis.sh for automatic secure configuration

# ============================================================================
# üìù SIMPLE WEB APPLICATION SETUP
# ============================================================================
# Basic web application with standard caching needs
# Suitable for: REST APIs, traditional web apps, content caching

# Development (secure local Redis):
CACHE_PRESET=simple
REDIS_URL=rediss://localhost:6380
REDIS_PASSWORD=your-secure-password
REDIS_TLS_ENABLED=true
ENABLE_AI_CACHE=false

# Production (secure remote Redis):
# CACHE_PRESET=simple
# REDIS_URL=rediss://cache-redis.example.com:6380
# REDIS_PASSWORD=your-production-password
# REDIS_TLS_ENABLED=true
# REDIS_TLS_CERT_PATH=/etc/ssl/certs/redis.crt
# REDIS_TLS_KEY_PATH=/etc/ssl/private/redis.key
# REDIS_TLS_CA_PATH=/etc/ssl/certs/ca.crt
# REDIS_ENCRYPTION_KEY=your-fernet-key
# ENABLE_AI_CACHE=false

# ============================================================================
# ü§ñ AI-POWERED APPLICATION SETUP
# ============================================================================
# LLM-powered application with text processing and AI features
# Suitable for: Chatbots, text analysis, AI content generation

# Development environment (secure local Redis):
CACHE_PRESET=ai-development
REDIS_URL=rediss://localhost:6380
REDIS_PASSWORD=your-secure-password
REDIS_TLS_ENABLED=true
REDIS_ENCRYPTION_KEY=your-fernet-encryption-key
ENABLE_AI_CACHE=true

# Production environment (secure remote Redis):
# CACHE_PRESET=ai-production
# REDIS_URL=rediss://ai-cache-redis.example.com:6380
# REDIS_PASSWORD=your-production-password
# REDIS_TLS_ENABLED=true
# REDIS_TLS_CERT_PATH=/etc/ssl/certs/redis.crt
# REDIS_TLS_KEY_PATH=/etc/ssl/private/redis.key
# REDIS_TLS_CA_PATH=/etc/ssl/certs/ca.crt
# REDIS_ENCRYPTION_KEY=your-production-fernet-key
# ENABLE_AI_CACHE=true

# With custom AI tuning:
# CACHE_PRESET=ai-production
# REDIS_URL=rediss://ai-cache-redis.example.com:6380
# REDIS_PASSWORD=your-production-password
# REDIS_ENCRYPTION_KEY=your-production-fernet-key
# ENABLE_AI_CACHE=true
# CACHE_CUSTOM_CONFIG='{"text_hash_threshold": 500, "operation_ttls": {"summarize": 14400, "sentiment": 7200}}'

# ============================================================================
# ‚ö° HIGH-PERFORMANCE PRODUCTION SETUP
# ============================================================================
# High-traffic production with dedicated Redis and performance optimization
# Suitable for: High-scale APIs, e-commerce, real-time applications

# Basic high-performance:
CACHE_PRESET=production
CACHE_REDIS_URL=redis://cache-redis:6379
ENABLE_AI_CACHE=false

# With performance tuning:
# CACHE_PRESET=production
# CACHE_REDIS_URL=redis://cache-redis:6379
# ENABLE_AI_CACHE=false
# CACHE_CUSTOM_CONFIG='{"max_connections": 100, "compression_level": 9, "default_ttl": 10800}'

# Multi-Redis setup (separate Redis instances):
# REDIS_URL=redis://general-redis:6379        # For sessions, rate limiting
# CACHE_REDIS_URL=redis://cache-redis:6379    # Dedicated cache Redis
# ENABLE_AI_CACHE=false

# ============================================================================
# üõ°Ô∏è DEVELOPMENT WITH DEBUGGING SETUP
# ============================================================================
# Development environment with detailed logging and fast feedback
# Suitable for: Local development, testing, debugging cache issues

# Standard development:
CACHE_PRESET=development
CACHE_REDIS_URL=redis://localhost:6379
ENABLE_AI_CACHE=true

# Fast development (quick cache expiration):
# CACHE_PRESET=development
# CACHE_REDIS_URL=redis://localhost:6379
# ENABLE_AI_CACHE=true
# CACHE_CUSTOM_CONFIG='{"default_ttl": 300, "connection_timeout": 1}'

# Development with verbose logging:
# CACHE_PRESET=development
# CACHE_REDIS_URL=redis://localhost:6379
# ENABLE_AI_CACHE=true
# CACHE_CUSTOM_CONFIG='{"log_level": "DEBUG", "enable_monitoring": true}'

# ============================================================================
# üîí SECURE PRODUCTION SETUP (TLS + Authentication + Encryption)
# ============================================================================
# Production setup with Redis authentication, TLS encryption, and data encryption
# Suitable for: Cloud deployments, sensitive data, compliance requirements
# NOTE: ALL production setups MUST use this configuration pattern

# Secure Redis with TLS (MANDATORY for production):
CACHE_PRESET=production
REDIS_URL=rediss://secure-cache-redis.example.com:6380
REDIS_PASSWORD=your-secure-redis-password-32-chars-min
REDIS_TLS_ENABLED=true
REDIS_TLS_CERT_PATH=/etc/ssl/certs/redis.crt
REDIS_TLS_KEY_PATH=/etc/ssl/private/redis.key
REDIS_TLS_CA_PATH=/etc/ssl/certs/ca.crt
REDIS_VERIFY_CERTIFICATES=true
REDIS_ENCRYPTION_KEY=your-fernet-encryption-key-base64
ENABLE_AI_CACHE=true

# Quick Setup:
# 1. Run: python scripts/generate-secure-env.py --environment production
# 2. Copy generated values to your production .env
# 3. Deploy certificates to /etc/ssl/certs/ and /etc/ssl/private/
# 4. Restart application

# ============================================================================
# üéØ MIXED ENVIRONMENT SETUP (AI + High Performance)
# ============================================================================
# Production AI application with performance optimization
# Suitable for: Production LLM services, AI-powered SaaS, ML platforms

# AI production with custom optimization:
CACHE_PRESET=ai-production
CACHE_REDIS_URL=redis://ai-cache-redis:6379
ENABLE_AI_CACHE=true
CACHE_CUSTOM_CONFIG='{"max_connections": 75, "text_hash_threshold": 2000, "compression_level": 8}'

# Dedicated AI Redis cluster:
# CACHE_PRESET=ai-production
# CACHE_REDIS_URL=redis://ai-cache-cluster:6379
# ENABLE_AI_CACHE=true
# CACHE_CUSTOM_CONFIG='{"max_connections": 100, "operation_ttls": {"summarize": 21600, "qa": 14400}}'

# ============================================================================
# üß™ TESTING AND CI/CD SETUP
# ============================================================================
# Testing environments with minimal cache footprint and isolation
# Suitable for: Unit tests, integration tests, CI/CD pipelines

# Minimal testing (disabled cache - no Redis required):
CACHE_PRESET=disabled
ENABLE_AI_CACHE=false

# Fast testing with secure Redis:
# CACHE_PRESET=development
# REDIS_URL=rediss://test-redis:6380/15
# REDIS_PASSWORD=test-password
# REDIS_TLS_ENABLED=true
# ENABLE_AI_CACHE=false
# CACHE_CUSTOM_CONFIG='{"default_ttl": 60, "memory_cache_size": 10}'

# AI testing environment (secure):
# CACHE_PRESET=ai-development
# REDIS_URL=rediss://test-redis:6380/15
# REDIS_PASSWORD=test-password
# REDIS_TLS_ENABLED=true
# REDIS_ENCRYPTION_KEY=test-encryption-key
# ENABLE_AI_CACHE=true
# CACHE_CUSTOM_CONFIG='{"default_ttl": 300, "text_hash_threshold": 100}'

# Development override to allow insecure Redis in isolated test environments:
# WARNING: Only use in CI/CD with isolated, ephemeral Redis instances
# REDIS_INSECURE_ALLOW_PLAINTEXT=true
# REDIS_URL=redis://test-redis:6379/15

# ============================================================================
# üê≥ DOCKER COMPOSE EXAMPLES
# ============================================================================

# Development (docker-compose.secure.yml):
# backend:
#   environment:
#     - CACHE_PRESET=ai-development
#     - REDIS_URL=rediss://redis:6380
#     - REDIS_PASSWORD=${REDIS_PASSWORD}
#     - REDIS_TLS_ENABLED=true
#     - REDIS_ENCRYPTION_KEY=${REDIS_ENCRYPTION_KEY}
#     - ENABLE_AI_CACHE=true

# Production (docker-compose.prod.yml):
# backend:
#   environment:
#     - CACHE_PRESET=ai-production
#     - REDIS_URL=rediss://cache-redis:6380
#     - REDIS_PASSWORD=${REDIS_PASSWORD}
#     - REDIS_TLS_ENABLED=true
#     - REDIS_TLS_CERT_PATH=/etc/ssl/certs/redis.crt
#     - REDIS_TLS_KEY_PATH=/etc/ssl/private/redis.key
#     - REDIS_TLS_CA_PATH=/etc/ssl/certs/ca.crt
#     - REDIS_ENCRYPTION_KEY=${REDIS_ENCRYPTION_KEY}
#     - ENABLE_AI_CACHE=true

# ============================================================================
# üîß KUBERNETES DEPLOYMENT EXAMPLES
# ============================================================================

# ConfigMap example (non-sensitive config):
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: redis-config
# data:
#   CACHE_PRESET: "ai-production"
#   REDIS_URL: "rediss://redis-service:6380"
#   REDIS_TLS_ENABLED: "true"
#   REDIS_VERIFY_CERTIFICATES: "true"
#   ENABLE_AI_CACHE: "true"

# Secret for sensitive values:
# apiVersion: v1
# kind: Secret
# metadata:
#   name: redis-secrets
# type: Opaque
# data:
#   REDIS_PASSWORD: <base64-encoded-password>
#   REDIS_ENCRYPTION_KEY: <base64-encoded-fernet-key>

# Volume mount for certificates:
# volumes:
#   - name: redis-certs
#     secret:
#       secretName: redis-tls-certs
#       items:
#         - key: redis.crt
#           path: redis.crt
#         - key: redis.key
#           path: redis.key
#         - key: ca.crt
#           path: ca.crt

# ============================================================================
# üí° CHOOSING THE RIGHT SETUP
# ============================================================================

# Use DISABLED when:
# - Running tests without cache dependencies
# - Minimal resource requirements
# - Cache is not needed for functionality

# Use SIMPLE when:
# - Standard web application
# - Balanced performance needs
# - No AI features required

# Use DEVELOPMENT when:
# - Local development environment
# - Fast feedback loops needed
# - Debugging cache behavior

# Use PRODUCTION when:
# - Production web application
# - High performance requirements
# - Long TTLs for efficiency

# Use AI-DEVELOPMENT when:
# - Developing AI/LLM features
# - Need AI-specific optimizations
# - Local AI development

# Use AI-PRODUCTION when:
# - Production AI application
# - LLM-powered services
# - High-performance AI caching

# ============================================================================
# üìä PERFORMANCE COMPARISON
# ============================================================================

# Configuration complexity (approximate):
# Legacy system: 28+ environment variables
# Preset system: 1-4 environment variables (96% reduction)

# Setup time:
# Legacy system: 15-30 minutes to configure properly
# Preset system: 2-5 minutes to get running (90% faster)

# Error rate:
# Legacy system: High (many variables to misconfigure)  
# Preset system: Low (presets are pre-validated)

# Maintainability:
# Legacy system: Complex (many variables to update)
# Preset system: Simple (preset handles most configuration)

# ============================================================================
# üí° GETTING HELP
# ============================================================================

# List all available presets:
# make list-cache-presets

# Show detailed preset configuration:  
# make show-cache-preset PRESET=development

# Validate your configuration:
# make validate-cache-config

# Get preset recommendation:
# make recommend-cache-preset ENV=staging

# Migrate from legacy configuration:
# make migrate-cache-config

# ============================================================================
# üîí SECURITY-FIRST REDIS ARCHITECTURE
# ============================================================================

# This template enforces mandatory security for all Redis connections:
# - TLS encryption (rediss://) is REQUIRED in production
# - Strong authentication is MANDATORY
# - Data encryption at rest using Fernet is ALWAYS enabled
# - Certificate validation is enforced in production

# Security Features:
# 1. Transport Layer Security (TLS 1.2/1.3)
#    - Encrypted network traffic
#    - Man-in-the-middle protection
#    - Certificate-based authentication

# 2. Application-Layer Encryption
#    - Fernet encryption for all cached data
#    - Transparent encryption/decryption
#    - Zero performance impact design

# 3. Authentication & Access Control
#    - Strong password requirements (32+ chars in production)
#    - Cryptographically random password generation
#    - Regular password rotation support

# 4. Environment-Aware Security
#    - Development: Balanced security for fast iteration
#    - Staging: Production-like security for testing
#    - Production: Maximum security enforcement

# Quick Setup Commands:
# - One-command setup: ./scripts/setup-secure-redis.sh
# - Generate config: python scripts/generate-secure-env.py --environment production
# - Validate config: python scripts/generate-secure-env.py --validate-only
# - Generate certs: ./scripts/init-redis-tls.sh

# Migration from Insecure Redis:
# If you were using redis:// (plaintext) connections:
# 1. Run: ./scripts/setup-secure-redis.sh
# 2. Update REDIS_URL from redis:// to rediss://
# 3. Add REDIS_PASSWORD, REDIS_TLS_ENABLED, REDIS_ENCRYPTION_KEY
# 4. Deploy TLS certificates
# 5. Restart application

# Documentation:
# - Security Guide: docs/guides/infrastructure/cache/security.md
# - Setup Guide: docs/get-started/ENVIRONMENT_VARIABLES.md
# - Troubleshooting: docs/guides/infrastructure/cache/troubleshooting.md