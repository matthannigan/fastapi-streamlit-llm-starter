name: Tests

# Temporarily disabled automatic triggers
# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main, develop ]

# Manual trigger only - can be run from GitHub Actions tab
on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental || false }}
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
        include:
          # Experimental Python 3.14 testing (allow failure)
          - python-version: "3.14-dev"
            experimental: true
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry==2.1.4

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pypoetry
          **/.venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock', '**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
          ${{ runner.os }}-pip-

    - name: Install shared dependencies
      run: |
        cd shared
        if [ -f "pyproject.toml" ]; then
          poetry install
        else
          echo "No Poetry configuration found in shared, skipping"
        fi

    - name: Install backend dependencies
      run: |
        cd backend
        if [ -f "pyproject.toml" ]; then
          poetry install --with dev,testing,quality
        else
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
        fi

    - name: Install frontend dependencies
      run: |
        cd frontend
        if [ -f "pyproject.toml" ]; then
          poetry install --with dev,quality
        else
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
        fi

    - name: Run backend tests
      env:
        GEMINI_API_KEY: test-key
      run: |
        cd backend
        if [ -f "pyproject.toml" ]; then
          poetry run pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        else
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        fi

    - name: Run frontend tests
      run: |
        cd frontend
        if [ -f "pyproject.toml" ]; then
          poetry run pytest tests/ -v --cov=app --cov-report=xml
        else
          python -m pytest tests/ -v --cov=app --cov-report=xml
        fi

    - name: Run code quality checks
      run: |
        cd backend
        if [ -f "pyproject.toml" ]; then
          poetry run flake8 app/
          poetry run mypy app/ --ignore-missing-imports
        else
          python -m flake8 app/
          python -m mypy app/ --ignore-missing-imports
        fi
        cd ../frontend
        if [ -f "pyproject.toml" ]; then
          poetry run flake8 app/
        else
          python -m flake8 app/
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage.xml,./frontend/coverage.xml
        fail_ci_if_error: true

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Build and test with Docker Compose
      run: |
        docker-compose build
        docker-compose up -d
        sleep 30
        
        # Test backend health
        curl -f http://localhost:8000/v1/health || exit 1
        
        # Test frontend health (if accessible)
        curl -f http://localhost:8501/_stcore/health || echo "Frontend health check skipped"
        
        docker-compose down 